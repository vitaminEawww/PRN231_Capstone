using DataAccess.Entities;
using DataAccess.Enums;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Repositories.IRepositories;

namespace Services.BackgroundServices;

public class NotificationBackgroundService : BackgroundService
{
    private readonly IServiceScopeFactory _serviceScopeFactory;
    private readonly ILogger<NotificationBackgroundService> _logger;
    private readonly TimeSpan _period = TimeSpan.FromHours(24); // Ch·∫°y m·ªói ng√†y

    public NotificationBackgroundService(
        IServiceScopeFactory serviceScopeFactory,
        ILogger<NotificationBackgroundService> logger)
    {
        _serviceScopeFactory = serviceScopeFactory;
        _logger = logger;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        // ƒê·ª£i ƒë·∫øn 9:00 AM m·ªói ng√†y
        await WaitUntilDailyTime(9, 0);

        while (!stoppingToken.IsCancellationRequested)
        {
            try
            {
                await SendDailyNotifications();

                // ƒê·ª£i ƒë·∫øn 9:00 AM ng√†y h√¥m sau
                await WaitUntilDailyTime(9, 0);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occurred executing notification background service");
                await Task.Delay(TimeSpan.FromHours(1), stoppingToken);
            }
        }
    }

    private async Task SendDailyNotifications()
    {
        _logger.LogInformation("Starting daily notification sending");

        using var scope = _serviceScopeFactory.CreateScope();
        var unitOfWork = scope.ServiceProvider.GetRequiredService<IUnitOfWork>();

        try
        {
            // L·∫•y t·∫•t c·∫£ customers c√≥ b·∫≠t notification
            var customers = await unitOfWork.Customers.GetAllAsync(c =>
                c.IsDailyReminderEnabled,
                c => c.Statistics,
                c => c.DailyProgresses);

            foreach (var customer in customers)
            {
                await SendDailyReminderNotification(unitOfWork, customer);
                await CheckMilestoneNotifications(unitOfWork, customer);
            }

            await unitOfWork.SaveAsync();
            _logger.LogInformation("Successfully sent daily notifications to {Count} customers", customers.Count());
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to send daily notifications");
            throw;
        }
    }

    private async Task SendDailyReminderNotification(IUnitOfWork unitOfWork, Customer customer)
    {
        var today = DateTime.Today;
        var hasLoggedToday = customer.DailyProgresses.Any(dp => dp.Date.Date == today);

        if (!hasLoggedToday)
        {
            var notification = new Notification
            {
                CustomerId = customer.Id,
                Type = NotificationType.DailyReminder,
                Title = "ƒê·ª´ng qu√™n ghi ch√©p h√¥m nay! üìù",
                Message = "H√£y ghi l·∫°i ti·∫øn tr√¨nh cai thu·ªëc c·ªßa b·∫°n h√¥m nay ƒë·ªÉ theo d√µi s·ª± ti·∫øn b·ªô.",
                IsRead = false,
                CreatedAt = DateTime.UtcNow
            };

            await unitOfWork.Notifications.AddAsync(notification);
        }
    }

    private async Task CheckMilestoneNotifications(IUnitOfWork unitOfWork, Customer customer)
    {
        if (customer.Statistics == null) return;

        var currentStreak = customer.Statistics.CurrentStreak;

        // Ki·ªÉm tra milestone
        var milestones = new[] { 1, 3, 7, 14, 30, 60, 90, 180, 365 };

        if (milestones.Contains(currentStreak))
        {
            var notification = new Notification
            {
                CustomerId = customer.Id,
                Type = NotificationType.Milestone,
                Title = $"üéâ Ch√∫c m·ª´ng! {currentStreak} ng√†y kh√¥ng h√∫t thu·ªëc!",
                Message = GetMilestoneMessage(currentStreak),
                IsRead = false,
                CreatedAt = DateTime.UtcNow
            };

            await unitOfWork.Notifications.AddAsync(notification);
        }
    }

    private string GetMilestoneMessage(int days)
    {
        return days switch
        {
            1 => "Ng√†y ƒë·∫ßu ti√™n th√†nh c√¥ng! ƒê√¢y l√† b∆∞·ªõc kh·ªüi ƒë·∫ßu tuy·ªát v·ªùi!",
            3 => "3 ng√†y! C∆° th·ªÉ b·∫°n ƒëang b·∫Øt ƒë·∫ßu ph·ª•c h·ªìi!",
            7 => "1 tu·∫ßn! B·∫°n ƒë√£ v∆∞·ª£t qua giai ƒëo·∫°n kh√≥ khƒÉn nh·∫•t!",
            14 => "2 tu·∫ßn! H·ªá tu·∫ßn ho√†n c·ªßa b·∫°n ƒëang c·∫£i thi·ªán!",
            30 => "1 th√°ng! Ph·ªïi b·∫°n ƒëang t·ª± l√†m s·∫°ch!",
            60 => "2 th√°ng! Nguy c∆° nhi·ªÖm tr√πng ƒë√£ gi·∫£m ƒë√°ng k·ªÉ!",
            90 => "3 th√°ng! Ch·ª©c nƒÉng ph·ªïi tƒÉng 30%!",
            180 => "6 th√°ng! Nguy c∆° b·ªánh tim gi·∫£m m·ªôt n·ª≠a!",
            365 => "1 nƒÉm! Nguy c∆° b·ªánh tim ch·ªâ b·∫±ng m·ªôt n·ª≠a so v·ªõi ng∆∞·ªùi h√∫t thu·ªëc!",
            _ => $"Th·∫≠t tuy·ªát v·ªùi! {days} ng√†y l√† m·ªôt th√†nh t√≠ch ƒë√°ng t·ª± h√†o!"
        };
    }

    private async Task WaitUntilDailyTime(int hour, int minute)
    {
        var now = DateTime.Now;
        var targetTime = DateTime.Today.AddHours(hour).AddMinutes(minute);

        if (now > targetTime)
        {
            targetTime = targetTime.AddDays(1);
        }

        var delay = targetTime - now;
        if (delay.TotalMilliseconds > 0)
        {
            await Task.Delay(delay);
        }
    }
}